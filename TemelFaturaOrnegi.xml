<Invoice xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:ext="urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2" xmlns:n4="http://www.altova.com/samplexml/other-namespace" xmlns:xades="http://uri.etsi.org/01903/v1.3.2#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2 ../xsdrt/maindoc/UBL-Invoice-2.1.xsd">
	<ext:UBLExtensions>
		<ext:UBLExtension>
			<ext:ExtensionContent>
				<ds:Signature Id="Signature_D56A3619-1E60-4578-BE9F-3F6FD885A033">
					<ds:SignedInfo>
						<ds:CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments"/>
						<ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"/>
						<ds:Reference Id="Reference-Id-d9df3fb6-a80f-444e-97ab-cd175b8cf3ba" Type="http://uri.etsi.org/01903#SignedProperties" URI="#Signed-Properties-Id-06cc80af-7b5c-444d-878c-eab446a0c7c5">
							<ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/>
							<ds:DigestValue>+Zuk550OMjSCnSRSAOK5aLgnIJ64ZI4rjZQ2OLEnN+w=</ds:DigestValue>
						</ds:Reference>
						<ds:Reference Id="Reference-Id-d8935540-d638-4123-bc8a-9c942d4ed5ee" URI="">
							<ds:Transforms>
								<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
							</ds:Transforms>
							<ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/>
							<ds:DigestValue>HK3P0lKzLFYfyEBh/n4jqilXnDsqz7TvTg8d4S39s9Q=</ds:DigestValue>
						</ds:Reference>
					</ds:SignedInfo>
					<ds:SignatureValue Id="Signature-Value-Id-c1070041-b5b0-4400-a84c-faa3f1346bdd">ONjaxTgHbSkT2ogCzA6fcoruylD2swFFkduEtIXKuuwEM3z/or8IDo5S4i8TYUkTwDc4VfeKnSfk
YEKvft/sYooM7nZdQzf1vJL7m0TqABq7/oK0EX0ycAKMTvWa4d7KKaE2z4EoQr5RNbV6hW51Ew+4
OHCF93Hno3j6q9rfUZWwzaHlV9odmjlWhnystk8NQRGyxnCeoNJ0akpuIWARz2bEO9XGtz4av5Rn
tzWyggQR/sm1Vwo2OweI4j25TTu16N1m6OPpBIGnDLy9RgzD7Vx+J4M0KBUZYNeOxfr3ImqGcYWO
j8sSh0kSm2V72gfith/6ziNZc5hX/P0HjtMgZA==</ds:SignatureValue>
					<ds:KeyInfo>
						<ds:X509Data>
							<ds:X509Certificate>MIIFrDCCBJSgAwIBAgIHaMk5qQPvVjANBgkqhkiG9w0BAQsFADBcMQswCQYDVQQGEwJUUjFNMEsG
A1UEAwxETWFsaSBNw7xow7xyIEVsZWt0cm9uaWsgU2VydGlmaWthIEhpem1ldCBTYcSfbGF5xLFj
xLFzxLEgLSBTw7xyw7xtIDIwHhcNMTcxMTIxMTI0OTM2WhcNMjAxMTIwMTI0OTM2WjBUMRMwEQYD
VQQFEwo0NjIwNTUzNzc0MT0wOwYDVQQDDDRISVpMSSBCxLBMxLDFnsSwTSBURUtOT0xPSsSwTEVS
xLAgQU5PTsSwTSDFnsSwUktFVMSwMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn9Wo
4VBCI8WKVDhsfj+sAGsCjfAVA4COCauNIRQ4SZUi9PXpbFJwRfeCdHBAU4tk1CagJeZkSwjgnMOZ
oPJ1AhsTPF5V8uFUI3mOn1+Ho0Z/gmWKy0nHFVXQK2YvGAadmH/VcMWxXN0RtM/Uxmag5umFX828
736xURR0UxRJnVe4jDDDuX9DX29X0Rz2vWsHjrV6KT8idnYrC2xzW9Rw4Er45W3sX9PAdVyT29rd
HPaXYT4wOO2VPjAEzwH2FJmtFKuqFQfKeglqPP+p0gTnGXD/K6wDHDuG2w4KIaoJSljPfeojNs81
RTg0hShfLxjTrMYwC3pBjtq1b8JzFnXbtwIDAQABo4ICeTCCAnUwHwYDVR0jBBgwFoAUA4T6lzHn
9IcZL2Ur4bQbY6evdb4wHQYDVR0OBBYEFGy5hSoNhCRZRZT5mOH224BXyNqiMA4GA1UdDwEB/wQE
AwIHgDCCATMGA1UdIASCASowggEmMIIBIgYLYIYYAQIBAQUHBAEwggERMCoGCCsGAQUFBwIBFh5o
dHRwOi8vZGVwby5rYW11c20uZ292LnRyL2lsa2UwgeIGCCsGAQUFBwICMIHVHoHSAEIAdQAgAHMA
ZQByAHQAaQBmAGkAawBhACAAaQBsAGUAIABpAGwAZwBpAGwAaQAgAHMAZQByAHQAaQBmAGkAawBh
ACAAdQB5AGcAdQBsAGEAbQBhACAAZQBzAGEAcwBsAGEAcgExAG4BMQAgAG8AawB1AG0AYQBrACAA
aQDnAGkAbgAgAGIAZQBsAGkAcgB0AGkAbABlAG4AIAB3AGUAYgAgAHMAaQB0AGUAcwBpAG4AaQAg
AHoAaQB5AGEAcgBlAHQAIABlAGQAaQBuAGkAegAuMAwGA1UdEwEB/wQCMAAwFgYDVR0lBA8wDQYL
YIYYAQIBAQUHMgEwQQYDVR0fBDowODA2oDSgMoYwaHR0cDovL2RlcG8ua2FtdXNtLmdvdi50ci9r
dXJ1bXNhbC9tbWVzaHMtczIuY3JsMIGCBggrBgEFBQcBAQR2MHQwPAYIKwYBBQUHMAKGMGh0dHA6
Ly9kZXBvLmthbXVzbS5nb3YudHIva3VydW1zYWwvbW1lc2hzLXMyLmNydDA0BggrBgEFBQcwAYYo
aHR0cDovL2Npc2R1cG1tczIua3VydW1zYWwua2FtdXNtLmdvdi50cjANBgkqhkiG9w0BAQsFAAOC
AQEAo4TUzpbM/cG+HGbEQskun8pN/ASXDUDvp19RPaGegg3bZqLdJI3ZlA3PFNzW2YvCqwyTAIs3
kYwLMatatlFtEdb5l1BrmmMdZSH13sw5YXuRJnyApl0UkhAb62X8yD7Ys8Ox2oC6WULmHCZKvyLe
EybbxeGpb83DHGIO7WNkz1rWWoWsfcK01MKyYrcU9xsHs/3/FqK6vVEy2L4Sx8nmsp7IKr8PDX22
AQNr3/5fVhRaaawhTSu4x93QQYpP0AufVgxadQLay3jpf11YH4sH+utj468RlUdbg1y4gLXvWjNG
zhremZLzjY2qbd7J8IaOqh+t+x8B76rh+fp2TuSU6Q==</ds:X509Certificate>
							<ds:X509SubjectName>CN=HIZLI BİLİŞİM TEKNOLOJİLERİ ANONİM ŞİRKETİ,SERIALNUMBER=4620553774</ds:X509SubjectName>
						</ds:X509Data>
						<ds:KeyValue>
							<ds:RSAKeyValue>
								<ds:Modulus>AJ/VqOFQQiPFilQ4bH4/rABrAo3wFQOAjgmrjSEUOEmVIvT16WxScEX3gnRwQFOLZNQmoCXmZEsI
4JzDmaDydQIbEzxeVfLhVCN5jp9fh6NGf4JlistJxxVV0CtmLxgGnZh/1XDFsVzdEbTP1MZmoObp
hV/NvO9+sVEUdFMUSZ1XuIwww7l/Q19vV9Ec9r1rB461eik/InZ2Kwtsc1vUcOBK+OVt7F/TwHVc
k9va3Rz2l2E+MDjtlT4wBM8B9hSZrRSrqhUHynoJajz/qdIE5xlw/yusAxw7htsOCiGqCUpYz33q
IzbPNUU4NIUoXy8Y06zGMAt6QY7atW/CcxZ127c=</ds:Modulus>
								<ds:Exponent>AQAB</ds:Exponent>
							</ds:RSAKeyValue>
						</ds:KeyValue>
					</ds:KeyInfo>
					<ds:Object Id="Object-Id-75845dfd-3975-4955-af6f-ea9ca853cfe6">
						<xades:QualifyingProperties Target="#Signature_D56A3619-1E60-4578-BE9F-3F6FD885A033">
							<xades:SignedProperties Id="Signed-Properties-Id-06cc80af-7b5c-444d-878c-eab446a0c7c5">
								<xades:SignedSignatureProperties>
									<xades:SigningTime>2018-05-14T15:30:04.935+03:00</xades:SigningTime>
									<xades:SigningCertificate>
										<xades:Cert>
											<xades:CertDigest>
												<ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/>
												<ds:DigestValue>CpLx7N8u1Bqd2U9sHyB4IVaEQTW5IGz/NzXqgkY3vuw=</ds:DigestValue>
											</xades:CertDigest>
											<xades:IssuerSerial>
												<ds:X509IssuerName>CN=Mali Mühür Elektronik Sertifika Hizmet Sağlayıcısı - Sürüm 2,C=TR</ds:X509IssuerName>
												<ds:X509SerialNumber>29494647063834454</ds:X509SerialNumber>
											</xades:IssuerSerial>
										</xades:Cert>
									</xades:SigningCertificate>
									<xades:SignerRole>
										<xades:ClaimedRoles>
											<xades:ClaimedRole>Tedarikçi</xades:ClaimedRole>
										</xades:ClaimedRoles>
									</xades:SignerRole>
								</xades:SignedSignatureProperties>
							</xades:SignedProperties>
						</xades:QualifyingProperties>
					</ds:Object>
				</ds:Signature>
			</ext:ExtensionContent>
		</ext:UBLExtension>
	</ext:UBLExtensions>
	<cbc:UBLVersionID>2.1</cbc:UBLVersionID>
	<cbc:CustomizationID>TR1.2</cbc:CustomizationID>
	<cbc:ProfileID>TEMELFATURA</cbc:ProfileID>
	<cbc:ID>ESK2018000000005</cbc:ID>
	<cbc:CopyIndicator>false</cbc:CopyIndicator>
	<cbc:UUID>C2D0BD38-BFA7-41FE-8C29-10F61FC60B50</cbc:UUID>
	<cbc:IssueDate>2018-05-14</cbc:IssueDate>
	<cbc:IssueTime>15:25:46</cbc:IssueTime>
	<cbc:InvoiceTypeCode>ALIS</cbc:InvoiceTypeCode>
	<cbc:Note>YAZI İLE: ALTIYÜZALTMIŞDÖRT TÜRK LİRASI OTUZDÖRT KURUŞ</cbc:Note>
	<cbc:DocumentCurrencyCode>TRY</cbc:DocumentCurrencyCode>
	<cbc:PricingCurrencyCode>TRY</cbc:PricingCurrencyCode>
	<cbc:LineCountNumeric>1</cbc:LineCountNumeric>
	<cac:DespatchDocumentReference>
		<cbc:ID>0000000000003731</cbc:ID>
		<cbc:IssueDate>2018-05-14</cbc:IssueDate>
	</cac:DespatchDocumentReference>
	<cac:AdditionalDocumentReference>
		<cbc:ID>E2FC15B8-E432-45DF-A58A-377E0D5D10C5</cbc:ID>
		<cbc:IssueDate>2018-05-14</cbc:IssueDate>
		<cbc:DocumentType>Xslt</cbc:DocumentType>
		<cac:Attachment>
			<cbc:EmbeddedDocumentBinaryObject characterSetCode="UTF-8" encodingCode="Base64" filename="ESK2018000000005.xslt" mimeCode="application/xml">
</cbc:EmbeddedDocumentBinaryObject>
		</cac:Attachment>
	</cac:AdditionalDocumentReference>
	<cac:Signature>
		<cbc:ID schemeID="VKN_TCKN">4620553774</cbc:ID>
		<cac:SignatoryParty>
			<cbc:WebsiteURI>www.xx.net</cbc:WebsiteURI>
			<cac:PartyIdentification><cbc:ID schemeID="VKN">4620553774</cbc:ID>
			</cac:PartyIdentification>
			<cac:PartyIdentification>
				<cbc:ID schemeID="TICARETSICILNO">33220  </cbc:ID>
			</cac:PartyIdentification>
			<cac:PartyIdentification>
				<cbc:ID schemeID="MERSISNO">0662012429600019</cbc:ID>
			</cac:PartyIdentification>
			<cac:PartyName>
				<cbc:Name>HIZLI BİLİŞİM TEST FİRMA LTD.ŞTİ</cbc:Name>
			</cac:PartyName>
			<cac:PostalAddress>
				<cbc:StreetName>YEŞİLOBA MAH. 46003  SOK.NO:12/A </cbc:StreetName>
				<cbc:BuildingName/>
				<cbc:CitySubdivisionName>ÇUKUROVA</cbc:CitySubdivisionName>
				<cbc:CityName>ADANA</cbc:CityName>
				<cac:Country><cbc:Name>TÜRKİYE</cbc:Name>
				</cac:Country>
			</cac:PostalAddress>
			<cac:PartyTaxScheme>
				<cac:TaxScheme>
					<cbc:Name>SEYHAN</cbc:Name>
					<cbc:TaxTypeCode>SEYHAN</cbc:TaxTypeCode>
				</cac:TaxScheme>
			</cac:PartyTaxScheme>
			<cac:Contact>
				<cbc:Telephone>03223700907</cbc:Telephone>
				<cbc:Telefax>03223468167</cbc:Telefax>
				<cbc:ElectronicMail>demo@xx.net</cbc:ElectronicMail>
			</cac:Contact></cac:SignatoryParty>
		<cac:DigitalSignatureAttachment>
			<cac:ExternalReference>
				<cbc:URI>#Signature_D56A3619-1E60-4578-BE9F-3F6FD885A033</cbc:URI>
			</cac:ExternalReference>
		</cac:DigitalSignatureAttachment>
	</cac:Signature>
	<cac:AccountingSupplierParty>
		<cac:Party>
			<cbc:WebsiteURI>www.xx.net</cbc:WebsiteURI>
			<cac:PartyIdentification>
				<cbc:ID schemeID="VKN">4620553774</cbc:ID>
			</cac:PartyIdentification>
			<cac:PartyIdentification>
				<cbc:ID schemeID="TICARETSICILNO">33220  </cbc:ID>
			</cac:PartyIdentification>
			<cac:PartyIdentification>
				<cbc:ID schemeID="MERSISNO">0662012429600019</cbc:ID>
			</cac:PartyIdentification><cac:PartyName>
				<cbc:Name>HIZLI BİLİŞİM TEST FİRMA LTD.ŞTİ</cbc:Name>
			</cac:PartyName>
			<cac:PostalAddress>
				<cbc:StreetName>YEŞİLOBA MAH. 46003  SOK.NO:12/A </cbc:StreetName>
				<cbc:BuildingName/>
				<cbc:CitySubdivisionName>ÇUKUROVA</cbc:CitySubdivisionName>
				<cbc:CityName>ADANA</cbc:CityName>
				<cac:Country>
					<cbc:Name>TÜRKİYE</cbc:Name>
				</cac:Country>
			</cac:PostalAddress>
			<cac:PartyTaxScheme>
				<cac:TaxScheme>
					<cbc:Name>SEYHAN</cbc:Name>
					<cbc:TaxTypeCode>SEYHAN</cbc:TaxTypeCode>
				</cac:TaxScheme></cac:PartyTaxScheme>
			<cac:Contact>
				<cbc:Telephone>03223700907</cbc:Telephone>
				<cbc:Telefax>03223468167</cbc:Telefax>
				<cbc:ElectronicMail>demo@xx.net</cbc:ElectronicMail>
			</cac:Contact>
		</cac:Party>
	</cac:AccountingSupplierParty>
	<cac:AccountingCustomerParty>
		<cac:Party>
			<cbc:WebsiteURI/>
			<cac:PartyIdentification>
				<cbc:ID schemeID="VKN">4620553774</cbc:ID>
			</cac:PartyIdentification>
			<cac:PartyName>
				<cbc:Name>ALICI HIZLI FİRMA LTD ŞTİ</cbc:Name>
			</cac:PartyName>
			<cac:PostalAddress>
				<cbc:CitySubdivisionName/>
				<cbc:CityName/>
				<cac:Country>
					<cbc:Name/>
				</cac:Country>
			</cac:PostalAddress>
			<cac:PartyTaxScheme>
				<cac:TaxScheme>
					<cbc:Name>4620553774</cbc:Name>
					<cbc:TaxTypeCode>4620553774</cbc:TaxTypeCode>
				</cac:TaxScheme>
			</cac:PartyTaxScheme>
			<cac:Contact>
				<cbc:Telephone/>
				<cbc:Telefax/>
				<cbc:ElectronicMail/>
				<cbc:Note/>
			</cac:Contact>
		</cac:Party>
	</cac:AccountingCustomerParty>
	<cac:AllowanceCharge>
		<cbc:ChargeIndicator>false</cbc:ChargeIndicator>
		<cbc:Amount currencyID="TRY">0</cbc:Amount>
	</cac:AllowanceCharge>
	<cac:PricingExchangeRate>
		<cbc:SourceCurrencyCode>TRY</cbc:SourceCurrencyCode>
		<cbc:TargetCurrencyCode>TRY</cbc:TargetCurrencyCode>
		<cbc:CalculationRate>0</cbc:CalculationRate>
		<cbc:Date>2018-05-14</cbc:Date>
	</cac:PricingExchangeRate>
	<cac:TaxTotal>
		<cbc:TaxAmount currencyID="TRY">101.34</cbc:TaxAmount>
		<cac:TaxSubtotal>
			<cbc:TaxableAmount currencyID="TRY">563</cbc:TaxableAmount>
			<cbc:TaxAmount currencyID="TRY">101.34</cbc:TaxAmount>
			<cbc:Percent>18</cbc:Percent><cac:TaxCategory>
				<cac:TaxScheme>
					<cbc:Name>KDV Tutarı</cbc:Name>
					<cbc:TaxTypeCode>0015</cbc:TaxTypeCode>
				</cac:TaxScheme>
			</cac:TaxCategory>
		</cac:TaxSubtotal>
	</cac:TaxTotal>
	<cac:LegalMonetaryTotal>
		<cbc:LineExtensionAmount currencyID="TRY">563</cbc:LineExtensionAmount>
		<cbc:TaxExclusiveAmount currencyID="TRY">563</cbc:TaxExclusiveAmount>
		<cbc:TaxInclusiveAmount currencyID="TRY">664.34</cbc:TaxInclusiveAmount>
		<cbc:AllowanceTotalAmount currencyID="TRY">0</cbc:AllowanceTotalAmount>
		<cbc:PayableAmount currencyID="TRY">664.34</cbc:PayableAmount>
	</cac:LegalMonetaryTotal>
	<cac:InvoiceLine>
		<cbc:ID>1</cbc:ID>
		<cbc:InvoicedQuantity unitCode="C62">1</cbc:InvoicedQuantity>
		<cbc:LineExtensionAmount currencyID="TRY">563</cbc:LineExtensionAmount>
		<cac:AllowanceCharge>
			<cbc:ChargeIndicator>false</cbc:ChargeIndicator>
			<cbc:AllowanceChargeReason/>
			<cbc:MultiplierFactorNumeric>0</cbc:MultiplierFactorNumeric>
			<cbc:Amount currencyID="TRY">0</cbc:Amount>
			<cbc:BaseAmount currencyID="TRY">563</cbc:BaseAmount>
		</cac:AllowanceCharge>
		<cac:TaxTotal>
			<cbc:TaxAmount currencyID="TRY">101.34</cbc:TaxAmount>
			<cac:TaxSubtotal>
				<cbc:TaxableAmount currencyID="TRY">563</cbc:TaxableAmount>
				<cbc:TaxAmount currencyID="TRY">101.34</cbc:TaxAmount>
				<cbc:Percent>18</cbc:Percent><cac:TaxCategory>
					<cac:TaxScheme>
						<cbc:Name>KDV</cbc:Name>
						<cbc:TaxTypeCode>0015</cbc:TaxTypeCode>
					</cac:TaxScheme></cac:TaxCategory>
			</cac:TaxSubtotal>
		</cac:TaxTotal>
		<cac:Item>
			<cbc:Name>deneme</cbc:Name>
			<cac:SellersItemIdentification>
				<cbc:ID>STOKKODU2</cbc:ID>
			</cac:SellersItemIdentification>
		</cac:Item>
		<cac:Price>
			<cbc:PriceAmount currencyID="TRY">563</cbc:PriceAmount>
		</cac:Price>
	</cac:InvoiceLine>
</Invoice>
